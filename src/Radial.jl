"""
    $(SIGNATURES)

One dimesional trapezoidal integration over a regularly discretized axis.
"""
function trapz(x::StepRange, y::AbstractArray)
    @assert length(x) == length(y)
    trapz(x.step, y)
end
function trapz(step::Number, y::AbstractArray)
    step * (sum(y) - (y[1] + y[end]) / 2)
end
function integral(f::Function, axis::AbstractArray, y::AbstractArray)
    x0, y0 = zero(eltype(axis)), zero(eltype(y))
    f0 = f(x0, y0)
    if dimension(f0) == dimension(x0)^-1
        U = typeof(ustrip(x0 * f0))
    else
        U = typeof(x0 * f0)
    end
    result = similar(y, U)
    integral!(f, axis, y, result)
end
function integral!(f::Function, axis::AbstractArray,
                   y::AbstractArray, result::AbstractArray)
    @argcheck length(axis) == length(y) == length(result)
    y0 = f(axis[1], y[1])
    @argcheck dimension(axis[1] * y0) == dimension(eltype(result))
    result[1] = 0 * unit(eltype(result))
    for i in 2:length(result)
        y1 = f(axis[i], y[i])
        result[i] = result[i - 1] + (axis[i] - axis[i - 1]) * (y1 + y0) / 2
        y0 = y1
    end
    result
end

radial_hartree{Q <: DFTUnits.Œ°}(œÅ::AxisArray{Q}) = radial_hartree!(œÅ, similar_potential(œÅ))

@inline function radial_hartree!{T <: DFTUnits.Œ°, Q <: DFTUnits.Œï}(œÅ::AxisArray{T},
                                                                   potential::AxisArray{Q})
    radial_hartree!(SimpleTraits.trait(AtomicDFT.HasSpinDim{typeof(œÅ)}), œÅ, potential)
end
@traitfn function radial_hartree!(œÅ::::(!HasSpinDim), potential)
    @argcheck :radius ‚àà axisnames(œÅ)
    const i = findfirst(axisnames(œÅ), :radius)
    add_radial_hartree!(œÅ, potential, axisvalues(œÅ)[i])
end
@traitfn function radial_hartree!(œÅ::::(HasSpinDim), potential)
    @argcheck :radius ‚àà axisnames(œÅ)
    const i = findfirst(axisnames(œÅ), :radius)
    add_radial_hartree!(view(œÅ, Axis{:spin}(:‚Üë)) .+ view(œÅ, Axis{:spin}(:‚Üì)),
                        potential, axisvalues(œÅ)[i])
end
function add_radial_hartree!(œÅ::AbstractArray, potential::AbstractArray,
                             axis::AbstractArray)
    @argcheck axis[1] ‚âà zero(eltype(axis))
    @argcheck length(œÅ) == length(potential) == length(axis)
    @argcheck all(axis[2:end] .> (0 * unit(eltype(axis))))
    const N = length(axis)

    #¬†e¬≤/(4œÄœµ‚ÇÄ)4œÄ/r \int_0^r r'^2 * œÅ(r') dr'
    ‚à´r¬≤œÅdr = integral((x, y) -> x*x*y, axis, œÅ)
    potential[2:end] .+= (view(‚à´r¬≤œÅdr, 2:N) ./ view(axis, 2:N))u"e‚ÇÄ^2*œµ‚ÇÄ^-1"

    #¬†e¬≤/(4œÄœµ‚ÇÄ)4œÄ \int_0^r r' * œÅ(r') dr'
    ‚à´rœÅdr = integral((x, y) -> x*y, axis, œÅ)
    potential[1:end] .+= (‚à´rœÅdr[end] - ‚à´rœÅdr)u"e‚ÇÄ^2*œµ‚ÇÄ^-1"

    potential
end

# immutable LDAPotential{T <: LibXC.CReal} <: AbstractPotential
#     functional::XCFunctional{T}
#     work::Array{T}
# end
#
#
# function RadialKohnSham(xc::Vararg{Symbol}; charge::Unitful.ChargeUnit=1u"e‚ÇÄ",
#                         polarized::Bool=false)
#     LDARadialKohnSham(map(x -> XCFunctional(x, polarized), xc), charge, œÅ)
# end
#
# function add_potential!{Œ° <: DFTUnits.Œ°, ùêï <: DFTUnits.Œï}(func::XCFunctional,
#                                                           œÅ::AxisArray{Q},
#                                                           potential::AxisArray{ùêï})
#    potential
# end
#
# function potential!{Œ° <: DFTUnits.Œ°, ùêï <: DFTUnits.Œï}(func::LDARadialKohnSham,
#                                                       œÅ::AxisArray{Q},
#                                                       potential::AxisArray{ùêï})
#     @argcheck size(œÅ) == size(potential)
#     fill!(potential, zero(eltype(potential)))
#
#     ùêØ = potential(func.œµxcs[1], œÅ)
#     potential += ùêØ
#
#     for i in eachindex(drop(func.œµxcs, 1))
#         add_potential!(func.œµxcs[1], œÅ, ùêØ)
#     end
#
#     radial_hartree!(œÅ, ‚àÇœµ_‚àÇœÅ)
# end
